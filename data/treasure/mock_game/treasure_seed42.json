{"version": 1, "world": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_12", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_15", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_2", "type": "c"}, {"name": "r_19", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_3", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_4", "type": "c"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_5", "type": "c"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_0", "type": "f"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_1", "type": "k"}, {"name": "r_18", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_10", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_10", "type": "s"}, {"name": "r_16", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_11", "type": "s"}, {"name": "r_19", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_12", "type": "s"}, {"name": "r_19", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_13", "type": "s"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_2", "type": "s"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_3", "type": "s"}, {"name": "r_13", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_4", "type": "s"}, {"name": "r_15", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_5", "type": "s"}, {"name": "r_18", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_6", "type": "s"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_7", "type": "s"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_8", "type": "s"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_9", "type": "s"}, {"name": "r_14", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "c_3", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "d_4", "type": "d"}]}, {"name": "closed", "arguments": [{"name": "d_5", "type": "d"}]}, {"name": "east_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_15", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "c_0", "type": "c"}]}, {"name": "link", "arguments": [{"name": "r_0", "type": "r"}, {"name": "d_2", "type": "d"}, {"name": "r_1", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_0", "type": "r"}, {"name": "d_5", "type": "d"}, {"name": "r_5", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_1", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_2", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_1", "type": "r"}, {"name": "d_2", "type": "d"}, {"name": "r_0", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_2", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_3", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_2", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_1", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_3", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_2", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_5", "type": "r"}, {"name": "d_4", "type": "d"}, {"name": "r_6", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_5", "type": "r"}, {"name": "d_5", "type": "d"}, {"name": "r_0", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_6", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_7", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_6", "type": "r"}, {"name": "d_4", "type": "d"}, {"name": "r_5", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_7", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_6", "type": "r"}]}, {"name": "locked", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "c_4", "type": "c"}]}, {"name": "locked", "arguments": [{"name": "d_3", "type": "d"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "d_3", "type": "d"}]}, {"name": "north_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_17", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_19", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "open", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_2", "type": "c"}]}, {"name": "open", "arguments": [{"name": "c_5", "type": "c"}]}, {"name": "open", "arguments": [{"name": "d_0", "type": "d"}]}, {"name": "open", "arguments": [{"name": "d_1", "type": "d"}]}, {"name": "open", "arguments": [{"name": "d_2", "type": "d"}]}, {"name": "south_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_16", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_16", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_19", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_12", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_13", "type": "r"}, {"name": "r_12", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_15", "type": "r"}, {"name": "r_13", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_17", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}], "grammar": {"theme": "house", "names_to_exclude": [], "include_adj": false, "blend_descriptions": false, "ambiguous_instructions": false, "only_last_action": false, "blend_instructions": false, "allowed_variables_numbering": false, "unique_expansion": false}, "quests": [{"desc": "Get ready to pick stuff up and put it in places, because you've just entered TextWorld! Here is how to play! First, it would be great if you could open the gateway within the restroom. Then, go east. With that accomplished, ensure that the passageway is open. After that, make an effort to head east. With that accomplished, take a trip east. Then, lift the keycard from the floor of the closet. With the keycard, go west. After that, make absolutely sure that the hatch is unlocked. And then, open the hatch. After that, make an attempt to move north. With that accomplished, make an effort to venture north. After that, take a trip north. With that accomplished, attempt to take a trip west. After that, lift the grape from the floor of the bathroom. That's it!", "reward": 1, "commands": ["open gateway", "go east", "open passageway", "go east", "go east", "take keycard", "go west", "unlock hatch with keycard", "open hatch", "go north", "go north", "go north", "go west", "take grape"], "win_events": [{"commands": ["open gateway", "go east", "open passageway", "go east", "go east", "take keycard", "go west", "unlock hatch with keycard", "open hatch", "go north", "go north", "go north", "go west", "take grape"], "actions": [{"name": "open/d", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_0", "type": "r"}, {"name": "d_5", "type": "d"}, {"name": "r_5", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_5", "type": "r"}, {"name": "d_5", "type": "d"}, {"name": "r_0", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "d_5", "type": "d"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_0", "type": "r"}, {"name": "d_5", "type": "d"}, {"name": "r_5", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_5", "type": "r"}, {"name": "d_5", "type": "d"}, {"name": "r_0", "type": "r"}]}, {"name": "open", "arguments": [{"name": "d_5", "type": "d"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_0", "type": "r"}]}], "command_template": "open {d_5}", "reverse_name": null, "reverse_command_template": "close {d_5}"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_0", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_5", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "open/d", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_5", "type": "r"}, {"name": "d_4", "type": "d"}, {"name": "r_6", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_6", "type": "r"}, {"name": "d_4", "type": "d"}, {"name": "r_5", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "d_4", "type": "d"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_5", "type": "r"}, {"name": "d_4", "type": "d"}, {"name": "r_6", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_6", "type": "r"}, {"name": "d_4", "type": "d"}, {"name": "r_5", "type": "r"}]}, {"name": "open", "arguments": [{"name": "d_4", "type": "d"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}], "command_template": "open {d_4}", "reverse_name": null, "reverse_command_template": "close {d_4}"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_5", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_6", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_6", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "go/east", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_6", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_18", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_18", "type": "r"}]}], "command_template": "go east", "reverse_name": null, "reverse_command_template": "go west"}, {"name": "take", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_18", "type": "r"}]}, {"name": "at", "arguments": [{"name": "k_1", "type": "k"}, {"name": "r_18", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_18", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "I", "type": "I"}]}], "command_template": "take {k_1}", "reverse_name": null, "reverse_command_template": "drop {k_1}"}, {"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_18", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_6", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_18", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_18", "type": "r"}, {"name": "r_6", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "unlock/d", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_6", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_6", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_7", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_7", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_6", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "d_3", "type": "d"}]}, {"name": "locked", "arguments": [{"name": "d_3", "type": "d"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_6", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_6", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_7", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_7", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_6", "type": "r"}]}, {"name": "in", "arguments": [{"name": "k_1", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "match", "arguments": [{"name": "k_1", "type": "k"}, {"name": "d_3", "type": "d"}]}, {"name": "closed", "arguments": [{"name": "d_3", "type": "d"}]}], "command_template": "unlock {d_3} with {k_1}", "reverse_name": null, "reverse_command_template": "lock {d_3} with {k_1}"}, {"name": "open/d", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_6", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_6", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_7", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_7", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_6", "type": "r"}]}, {"name": "closed", "arguments": [{"name": "d_3", "type": "d"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_6", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_6", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_7", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_7", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_6", "type": "r"}]}, {"name": "open", "arguments": [{"name": "d_3", "type": "d"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}], "command_template": "open {d_3}", "reverse_name": null, "reverse_command_template": "close {d_3}"}, {"name": "go/north", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_6", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_7", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}], "command_template": "go north", "reverse_name": null, "reverse_command_template": "go south"}, {"name": "go/north", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_7", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_8", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_8", "type": "r"}]}], "command_template": "go north", "reverse_name": null, "reverse_command_template": "go south"}, {"name": "go/north", "preconditions": [{"name": "north_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_8", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_9", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_9", "type": "r"}]}], "command_template": "go north", "reverse_name": null, "reverse_command_template": "go south"}, {"name": "go/west", "preconditions": [{"name": "west_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_9", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_14", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_14", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_14", "type": "r"}]}], "command_template": "go west", "reverse_name": null, "reverse_command_template": "go east"}, {"name": "take", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_14", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_0", "type": "f"}, {"name": "r_14", "type": "r"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_14", "type": "r"}]}, {"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "I", "type": "I"}]}], "command_template": "take {f_0}", "reverse_name": null, "reverse_command_template": "drop {f_0}"}], "condition": {"name": "trigger", "preconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_14", "type": "r"}]}, {"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_14", "type": "r"}]}, {"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "event", "arguments": [{"name": "I", "type": "I"}, {"name": "P", "type": "P"}, {"name": "f_0", "type": "f"}, {"name": "r_14", "type": "r"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "in", "arguments": [{"name": "k_0", "type": "k"}, {"name": "I", "type": "I"}]}, {"name": "event", "arguments": [{"name": "I", "type": "I"}, {"name": "k_0", "type": "k"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}], "infos": [["P", {"id": "P", "type": "P", "name": null, "noun": null, "adj": null, "desc": null, "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["I", {"id": "I", "type": "I", "name": null, "noun": null, "adj": null, "desc": null, "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["r_0", {"id": "r_0", "type": "r", "name": "restroom", "noun": "restroom", "adj": null, "desc": "Well how about that, you are in the place we're calling the restroom.\n\n If you haven't noticed it already, there seems to be something there by the wall, it's a board. [if there is something on the s_0]You see [a list of things on the s_0] on the board. I mean, just wow! Isn't TextWorld just the best?[end if][if there is nothing on the s_0]But oh no! there's nothing on this piece of junk. What, you think everything in TextWorld should have stuff on it?[end if]\n\n There is [if d_5 is open]an open[otherwise]a closed[end if] gateway leading east. There is [if d_2 is open]an open[otherwise]a closed[end if] portal leading west. You need an unblocked exit? You should try going north.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_1", {"id": "r_1", "type": "r", "name": "attic", "noun": "attic", "adj": null, "desc": "You arrive in an attic. An ordinary one. You begin looking for stuff.\n\n\n\n There is [if d_2 is open]an open[otherwise]a closed[end if] portal leading east. There is [if d_1 is open]an open[otherwise]a closed[end if] door leading north.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_10", {"id": "r_10", "type": "r", "name": "kitchen", "noun": "kitchen", "adj": null, "desc": "You arrive in a kitchen. A standard kind of place. You begin to take stock of what's in the room.\n\n You can make out a plate. The plate is normal.[if there is something on the s_1] On the plate you see [a list of things on the s_1].[end if][if there is nothing on the s_1] However, the plate, like an empty plate, has nothing on it.[end if]\n\nYou don't like doors? Why not try going north, that entranceway is unblocked. There is an exit to the west. Don't worry, it is unblocked.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_9", {"id": "r_9", "type": "r", "name": "steam room", "noun": "steam room", "adj": null, "desc": "You are in a steam room. It seems to be pretty standard here. The room seems oddly familiar, as though it were only superficially different from the other rooms in the building.\n\n You scan the room for a table, and you find a table. Why don't you take a picture of it, it'll last longer! [if there is something on the s_2]On the table you see [a list of things on the s_2].[end if][if there is nothing on the s_2]But there isn't a thing on it.[end if]\n\nYou need an unguarded exit? You should try going east. You don't like doors? Why not try going north, that entranceway is unguarded. You need an unguarded exit? You should try going south. There is an exit to the west. Don't worry, it is unblocked.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_11", {"id": "r_11", "type": "r", "name": "bedchamber", "noun": "bedchamber", "adj": null, "desc": "You find yourself in a bedchamber. The room seems oddly familiar, as though it were only superficially different from the other rooms in the building.\n\n\n\nYou need an unguarded exit? You should try going south. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_12", {"id": "r_12", "type": "r", "name": "study", "noun": "study", "adj": null, "desc": "You are in a study. A normal kind of place. The room seems oddly familiar, as though it were only superficially different from the other rooms in the building.\n\n You can make out a coffer. Make a note of this, you might have to put stuff on or in it later on.[if c_0 is open and there is something in the c_0] The coffer contains [a list of things in the c_0].[end if][if c_0 is open and the c_0 contains nothing] The coffer is empty, what a horrible day![end if]\n\nThere is an unguarded exit to the east. There is an unblocked exit to the south. There is an exit to the west. Don't worry, it is unguarded.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_13", {"id": "r_13", "type": "r", "name": "laundry place", "noun": "laundry place", "adj": null, "desc": "You are in a laundry place. An usual one. You begin to take stock of what's here.\n\n Were you looking for a bench? Because look over there, it's a bench. [if there is something on the s_3]On the bench you can see [a list of things on the s_3].[end if][if there is nothing on the s_3]Unfortunately, there isn't a thing on it.[end if]\n\nYou don't like doors? Why not try going east, that entranceway is unblocked. There is an exit to the south. Don't worry, it is unguarded. You don't like doors? Why not try going west, that entranceway is unguarded.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_15", {"id": "r_15", "type": "r", "name": "studio", "noun": "studio", "adj": null, "desc": "You've just shown up in a studio.\n\n You scan the room, seeing a suitcase. Wow, isn't TextWorld just the best?[if c_1 is open and there is something in the c_1] The suitcase contains [a list of things in the c_1].[end if][if c_1 is open and the c_1 contains nothing] The suitcase is empty! What a waste of a day![end if] You can see an armchair. The armchair is ordinary.[if there is something on the s_4] On the armchair you can see [a list of things on the s_4].[end if][if there is nothing on the s_4] However, the armchair, like an empty armchair, has nothing on it.[end if]\n\nYou don't like doors? Why not try going east, that entranceway is unguarded.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_18", {"id": "r_18", "type": "r", "name": "closet", "noun": "closet", "adj": null, "desc": "Well, here we are in the closet. You start to take note of what's in the room.\n\n You can see a rack. Wow, isn't TextWorld just the best? [if there is something on the s_5]You see [a list of things on the s_5] on the rack.[end if][if there is nothing on the s_5]But the thing is empty.[end if]\n\nThere is an unblocked exit to the west.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_6", {"id": "r_6", "type": "r", "name": "salon", "noun": "salon", "adj": null, "desc": "You've entered a salon. Okay, just remember what you're here to do, and everything will go great.\n\n\n\n There is [if d_3 is open]an open[otherwise]a closed[end if] hatch leading north. There is [if d_4 is open]an open[otherwise]a closed[end if] passageway leading west. You need an unblocked exit? You should try going east.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_5", {"id": "r_5", "type": "r", "name": "bedroom", "noun": "bedroom", "adj": null, "desc": "Guess what, you are in a place we're calling a bedroom. You start to take note of what's in the room.\n\n Were you looking for a bar? Because look over there, it's a bar. The bar is usual.[if there is something on the s_6] On the bar you see [a list of things on the s_6]. You can't wait to tell the folks at home about this![end if][if there is nothing on the s_6] The bar appears to be empty. Oh! Why couldn't there just be stuff on it?[end if]\n\n There is [if d_4 is open]an open[otherwise]a closed[end if] passageway leading east. There is [if d_5 is open]an open[otherwise]a closed[end if] gateway leading west.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_7", {"id": "r_7", "type": "r", "name": "workshop", "noun": "workshop", "adj": null, "desc": "You're now in a workshop.\n\n You can see a bookshelf. [if there is something on the s_7]You see [a list of things on the s_7] on the bookshelf.[end if][if there is nothing on the s_7]But there isn't a thing on it.[end if] Look out! It's a- oh, never mind, it's just a mantelpiece. The mantelpiece is typical.[if there is something on the s_8] On the mantelpiece you can make out [a list of things on the s_8].[end if][if there is nothing on the s_8] However, the mantelpiece, like an empty mantelpiece, has nothing on it.[end if]\n\n There is [if d_3 is open]an open[otherwise]a closed[end if] hatch leading south. There is an unguarded exit to the north. You need an unguarded exit? You should try going west.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_17", {"id": "r_17", "type": "r", "name": "shower", "noun": "shower", "adj": null, "desc": "You've just sauntered into a shower.\n\n\n\nThere is an unblocked exit to the east. There is an unblocked exit to the north.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_14", {"id": "r_14", "type": "r", "name": "bathroom", "noun": "bathroom", "adj": null, "desc": "You have entered a bathroom. Not the bathroom you'd expect. No, this is a bathroom.\n\n You make out a chipped table. [if there is something on the s_9]On the chipped table you can make out [a list of things on the s_9].[end if][if there is nothing on the s_9]But the thing hasn't got anything on it.[end if]\n\nThere is an exit to the east. Don't worry, it is unblocked. You need an unblocked exit? You should try going north. There is an unguarded exit to the south.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_16", {"id": "r_16", "type": "r", "name": "sauna", "noun": "sauna", "adj": null, "desc": "You arrive in a sauna. A standard one.\n\n You see a shelf. The shelf is usual.[if there is something on the s_10] On the shelf you make out [a list of things on the s_10].[end if][if there is nothing on the s_10] Unfortunately, there isn't a thing on it. What, you think everything in TextWorld should have stuff on it?[end if]\n\nYou need an unguarded exit? You should try going north. You need an unguarded exit? You should try going south.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_19", {"id": "r_19", "type": "r", "name": "dish-pit", "noun": "dish-pit", "adj": null, "desc": "You arrive in a dish-pit.\n\n You make out a chest. Classic TextWorld.[if c_2 is open and there is something in the c_2] The chest contains [a list of things in the c_2].[end if][if c_2 is open and the c_2 contains nothing] The chest is empty, what a horrible day![end if] What's that over there? It looks like it's a platter. [if there is something on the s_11]You see [a list of things on the s_11] on the platter. Wow! Just like in the movies![end if][if there is nothing on the s_11]Looks like someone's already been here and taken everything off it, though. Hm. Oh well[end if] You scan the room, seeing a chair. The chair is standard.[if there is something on the s_12] On the chair you see [a list of things on the s_12]. There's something strange about this being here, but you can't put your finger on it.[end if][if there is nothing on the s_12] However, the chair, like an empty chair, has nothing on it. Hopefully, this discovery doesn't ruin your TextWorld experience![end if]\n\nThere is an unblocked exit to the south.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_2", {"id": "r_2", "type": "r", "name": "cubicle", "noun": "cubicle", "adj": null, "desc": "You've just shown up in a cubicle. You start to take note of what's in the room.\n\n\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] gate leading north. There is [if d_1 is open]an open[otherwise]a closed[end if] door leading south.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_3", {"id": "r_3", "type": "r", "name": "garage", "noun": "garage", "adj": null, "desc": "This might come as a shock to you, but you've just entered a garage.\n\n You can see [if c_3 is locked]a locked[else if c_3 is open]an opened[otherwise]a closed[end if] display.[if c_3 is open and there is something in the c_3] The display contains [a list of things in the c_3].[end if][if c_3 is open and the c_3 contains nothing] The display is empty, what a horrible day![end if] You can make out a case.[if c_4 is open and there is something in the c_4] The case contains [a list of things in the c_4].[end if][if c_4 is open and the c_4 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if] As if things weren't amazing enough already, you can even see a counter. [if there is something on the s_13]On the counter you see [a list of things on the s_13].[end if][if there is nothing on the s_13]But the thing hasn't got anything on it.[end if]\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] gate leading south. You need an unblocked exit? You should try going north.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_4", {"id": "r_4", "type": "r", "name": "laundromat", "noun": "laundromat", "adj": null, "desc": "Well how about that, you are in the place we're calling the laundromat.\n\n You scan the room, seeing a cabinet.[if c_5 is open and there is something in the c_5] The cabinet contains [a list of things in the c_5]. The light flickers for a second, but nothing else happens.[end if][if c_5 is open and the c_5 contains nothing] Empty! What kind of nightmare TextWorld is this?[end if]\n\nYou don't like doors? Why not try going south, that entranceway is unblocked.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_8", {"id": "r_8", "type": "r", "name": "playroom", "noun": "playroom", "adj": null, "desc": "You are in a playroom. An usual one.\n\n\n\nYou need an unblocked exit? You should try going north. There is an exit to the south. Don't worry, it is unguarded.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["d_2", {"id": "d_2", "type": "d", "name": "portal", "noun": "portal", "adj": null, "desc": "it is what it is, a portal [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["d_5", {"id": "d_5", "type": "d", "name": "gateway", "noun": "gateway", "adj": null, "desc": "it's a stuffy gateway [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["d_1", {"id": "d_1", "type": "d", "name": "door", "noun": "door", "adj": null, "desc": "The door looks well-built. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["d_0", {"id": "d_0", "type": "d", "name": "gate", "noun": "gate", "adj": null, "desc": "The gate looks solid. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["d_4", {"id": "d_4", "type": "d", "name": "passageway", "noun": "passageway", "adj": null, "desc": "The passageway looks well-built. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["d_3", {"id": "d_3", "type": "d", "name": "hatch", "noun": "hatch", "adj": null, "desc": "it is what it is, a hatch [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["c_0", {"id": "c_0", "type": "c", "name": "coffer", "noun": "coffer", "adj": null, "desc": "The coffer looks strong, and impossible to break. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_1", {"id": "c_1", "type": "c", "name": "suitcase", "noun": "suitcase", "adj": null, "desc": "The suitcase looks strong, and impossible to destroy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_2", {"id": "c_2", "type": "c", "name": "chest", "noun": "chest", "adj": null, "desc": "The chest looks strong, and impossible to destroy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["c_3", {"id": "c_3", "type": "c", "name": "display", "noun": "display", "adj": null, "desc": "The display looks strong, and impossible to break. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_4", {"id": "c_4", "type": "c", "name": "case", "noun": "case", "adj": null, "desc": "The case looks strong, and impossible to destroy. [if open]It is open.[else if closed]It is closed.[otherwise]It is locked.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_5", {"id": "c_5", "type": "c", "name": "cabinet", "noun": "cabinet", "adj": null, "desc": "The cabinet looks strong, and impossible to crack. [if open]You can see inside it.[else if closed]You can't see inside it because the lid's in your way.[otherwise]There is a lock on it.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["f_0", {"id": "f_0", "type": "f", "name": "grape", "noun": "grape", "adj": null, "desc": "You couldn't pay me to eat that normal thing.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["k_1", {"id": "k_1", "type": "k", "name": "keycard", "noun": "keycard", "adj": null, "desc": "The keycard is cold to the touch", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_0", {"id": "s_0", "type": "s", "name": "board", "noun": "board", "adj": null, "desc": "The board is an unstable piece of junk.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_1", {"id": "s_1", "type": "s", "name": "plate", "noun": "plate", "adj": null, "desc": "The plate is wobbly.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_10", {"id": "s_10", "type": "s", "name": "shelf", "noun": "shelf", "adj": null, "desc": "The shelf is solid.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_11", {"id": "s_11", "type": "s", "name": "platter", "noun": "platter", "adj": null, "desc": "The platter is an unstable piece of junk.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_12", {"id": "s_12", "type": "s", "name": "chair", "noun": "chair", "adj": null, "desc": "The chair is shaky.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_13", {"id": "s_13", "type": "s", "name": "counter", "noun": "counter", "adj": null, "desc": "The counter is stable.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_2", {"id": "s_2", "type": "s", "name": "table", "noun": "table", "adj": null, "desc": "The table is unstable.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_3", {"id": "s_3", "type": "s", "name": "bench", "noun": "bench", "adj": null, "desc": "The bench is shaky.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_4", {"id": "s_4", "type": "s", "name": "armchair", "noun": "armchair", "adj": null, "desc": "The armchair is balanced.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_5", {"id": "s_5", "type": "s", "name": "rack", "noun": "rack", "adj": null, "desc": "The rack is shaky.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_6", {"id": "s_6", "type": "s", "name": "bar", "noun": "bar", "adj": null, "desc": "The bar is solidly built.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["s_7", {"id": "s_7", "type": "s", "name": "bookshelf", "noun": "bookshelf", "adj": null, "desc": "The bookshelf is unstable.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_8", {"id": "s_8", "type": "s", "name": "mantelpiece", "noun": "mantelpiece", "adj": null, "desc": "The mantelpiece is an unstable piece of trash.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_9", {"id": "s_9", "type": "s", "name": "chipped table", "noun": "table", "adj": "chipped", "desc": "The chipped table is stable.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["k_0", {"id": "k_0", "type": "k", "name": "latchkey", "noun": "latchkey", "adj": null, "desc": "The latchkey looks useful", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}]], "KB": {"logic": "# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n\n        examine/d :: at(P, r) & $link(r, d, r') -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n\n        examine/d :: examine/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        too_many_doors :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr1 :: free(r, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr2 :: free(r, r1: r) & free(r, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr3 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n        dr4 :: free(r, r1: r) & free(r, r2: r) & free(r, r3: r) & free(r, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n\n            examine/d :: \"examine {d}\" :: \"examining {d}\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        edible(f);\n        eaten(f);\n    }\n\n    rules {\n        eat :: in(f, I) -> eaten(f);\n    }\n\n    constraints {\n        eaten1 :: eaten(f) & in(f, I) -> fail();\n        eaten2 :: eaten(f) & in(f, c) -> fail();\n        eaten3 :: eaten(f) & on(f, s) -> fail();\n        eaten4 :: eaten(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n            definition :: \"food is edible.\";\n        }\n\n        predicates {\n            edible(f) :: \"The {f} is edible\";\n            eaten(f) :: \"The {f} is nowhere\";\n        }\n\n        commands {\n            eat :: \"eat {f}\" :: \"eating the {f}\";\n        }\n    }\n}\n\n# Inventory\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        inventory :: at(P, r) -> at(P, r);  # Nothing changes.\n\n        take :: $at(P, r) & at(o, r) -> in(o, I);\n        drop :: $at(P, r) & in(o, I) -> at(o, r);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) -> in(o, I);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) -> in(o, c);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) -> in(o, I);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) -> on(o, s);\n\n        examine/I :: in(o, I) -> in(o, I);  # Nothing changes.\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);  # Nothing changes.\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        inventory :: inventory;\n\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n\n        examine/I :: examine/I;\n        examine/s :: examine/s;\n        examine/c :: examine/c;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\n# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# Player\ntype P {\n    rules {\n        look :: at(P, r) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        look :: look;\n    }\n\n    inform7 {\n        commands {\n            look :: \"look\" :: \"looking\";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        south_of(r, r') = north_of(r', r);\n        east_of(r, r') = west_of(r', r);\n\n        south_of/d(r, d, r') = north_of/d(r', d, r);\n        east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(t, r) :: \"The {t} is in {r}\";\n            free(r, r') :: \"\";  # No equivalent in Inform7.\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n        }\n    }\n}\n\n# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n    }\n}\n\n# thing\ntype t {\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    reverse_rules {\n        examine/t :: examine/t;\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\n", "text_grammars_path": "/data3/micromamba/envs/text/lib/python3.11/site-packages/textworld/generator/data/text_grammars"}, "metadata": {"walkthrough": ["open gateway", "go east", "open passageway", "go east", "go east", "take keycard", "go west", "unlock hatch with keycard", "open hatch", "go north", "go north", "go north", "go west", "take grape"], "desc": "Treasure Hunter", "mode": "hard", "seeds": {"map": 15795, "objects": 860, "quest": 54886, "grammar": 6265}, "world_size": 20, "quest_length": 14, "uuid": "tw-treasure_hunter-Y1Iqhv-house-GP-67XKC3EyH2riOk8"}, "objective": "Hey, thanks for coming over to the TextWorld today, there is something I need you to do for me. First off, ensure that the gateway is open. And then, move east. And then, doublecheck that the passageway is ajar. And then, travel east. And then, venture east. Then, lift the keycard from the floor of the closet. And then, make an effort to head west. If you can do that, unlock the hatch. And then, ensure that the hatch is open. Then, head north. Then, make an attempt to take a trip north. And then, make an effort to go to the north. Then, venture west. With that done, pick up the grape from the floor of the bathroom. And once you've done that, you win!"}